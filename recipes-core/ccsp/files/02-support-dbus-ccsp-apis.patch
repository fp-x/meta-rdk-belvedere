 source/ccsp/include/ccsp_message_bus.h          |  1 -
 source/util_api/ccsp_msg_bus/ccsp_message_bus.c | 89 +++++++++++--------------
 2 files changed, 39 insertions(+), 51 deletions(-)

diff --git a/source/util_api/ccsp_msg_bus/ccsp_message_bus.c b/source/util_api/ccsp_msg_bus/ccsp_message_bus.c
index e212749..662378f 100644
--- a/source/util_api/ccsp_msg_bus/ccsp_message_bus.c
+++ b/source/util_api/ccsp_msg_bus/ccsp_message_bus.c
@@ -19,7 +19,6 @@
 #include <string.h>
 #include <pthread.h>
 #include <dbus/dbus.h>
-#include <dbus/dbus-mainloop.h>
 #include <ccsp_message_bus.h>
 #include "ccsp_base_api.h"
 #include "ccsp_trace.h"
@@ -37,8 +36,8 @@ const int NANOSEC_PER_MILLISEC = 1000000;
 #endif
 
 // EXTERNAL
-extern void _dbus_connection_lock (DBusConnection *connection);
-extern void _dbus_connection_unlock (DBusConnection *connection);
+extern void dbus_connection_lock (DBusConnection *connection);
+extern void dbus_connection_unlock (DBusConnection *connection);
 
 extern CCSP_DEADLOCK_DETECTION_INFO deadlock_detection_info;
 extern int   CcspBaseIf_timeout_protect_plus_seconds;
@@ -75,6 +74,7 @@ inline static PCCSP_MSG_SINGLE_LINK_ENTRY   CcspMsgQueuePopEntry(CCSP_MSG_QUEUE
 static dbus_bool_t       connection_watch_callback(DBusWatch*, unsigned int, void*);
 static dbus_bool_t       add_watch(DBusWatch*, void*);
 static void              remove_watch(DBusWatch*, void*);
+static void              toggle_watch(DBusWatch*, void*);
 static void              connection_timeout_callback(DBusTimeout*, void*);
 static dbus_bool_t       add_timeout(DBusTimeout*, void*);
 static void              remove_timeout(DBusTimeout*, void*);
@@ -205,16 +205,10 @@ add_watch
 {
     CData *cd = data;
     
-    return _dbus_loop_add_watch 
+    return dbus_loop_add_watch 
                (
                    cd->loop,
                    watch
-#if 0
-                   watch,
-                   connection_watch_callback,
-                   cd, 
-                   NULL
-#endif
                 );
 }
 
@@ -227,15 +221,26 @@ remove_watch
 {
     CData *cd = data;
     
-    _dbus_loop_remove_watch 
+    dbus_loop_remove_watch 
+        (
+             cd->loop,
+             watch 
+         );
+}
+
+static void 
+toggle_watch 
+(
+    DBusWatch *watch,
+    void      *data
+)
+{
+    CData *cd = data;
+    
+    dbus_loop_toggle_watch 
         (
              cd->loop,
              watch 
-#if 0
-             watch, 
-             connection_watch_callback, 
-             cd
-#endif
          );
 }
 
@@ -259,16 +264,10 @@ add_timeout
 {
     CData *cd = data;
 
-    return _dbus_loop_add_timeout 
+    return dbus_loop_add_timeout 
                (
                    cd->loop,
                    timeout 
-#if 0
-                   timeout, 
-                   connection_timeout_callback, 
-                   cd, 
-                   NULL
-#endif
                 );
 }
 
@@ -281,15 +280,10 @@ remove_timeout
 {
     CData *cd = data;
 
-    _dbus_loop_remove_timeout 
+    dbus_loop_remove_timeout 
         (
             cd->loop,
             timeout 
-#if 0
-            timeout, 
-            connection_timeout_callback, 
-            cd
-#endif
          );
 }
 
@@ -309,7 +303,7 @@ cdata_new
     cd->connection = connection;
     
     dbus_connection_ref (cd->connection);
-    _dbus_loop_ref (cd->loop);
+    dbus_loop_ref (cd->loop);
 
     return cd;
 }
@@ -323,7 +317,7 @@ cdata_free
     CData *cd = data;
 
     dbus_connection_unref (cd->connection);
-    _dbus_loop_unref (cd->loop);
+    dbus_loop_unref (cd->loop);
 
     dbus_free (cd);
 }
@@ -362,8 +356,8 @@ dispatch_status_func
 
     if (new_status != DBUS_DISPATCH_COMPLETE)
     {
-        while ( ! _dbus_loop_queue_dispatch (loop, connection))
-            _dbus_wait_for_memory ();
+        while ( ! dbus_loop_queue_dispatch (loop, connection))
+            dbus_wait_for_memory ();
     }
 }
 
@@ -487,17 +481,12 @@ ccsp_connection_setup
     cd = cdata_new (loop, connection);
     if (cd == NULL) goto NO_MEM;
 
-    /* Because dbus-mainloop.c checks dbus_timeout_get_enabled(),
-     * dbus_watch_get_enabled() directly, we don't have to provide
-     * "toggled" callbacks.
-     */
-
     if ( ! dbus_connection_set_watch_functions 
                (
                    connection,
                    add_watch,
                    remove_watch,
-                   NULL,
+                   toggle_watch,
                    cd, 
                    cdata_free
                 ))
@@ -521,7 +510,7 @@ ccsp_connection_setup
     // check dispatch status
     if (dbus_connection_get_dispatch_status (connection) != DBUS_DISPATCH_COMPLETE)
     {
-        if ( ! _dbus_loop_queue_dispatch (loop, connection))
+        if ( ! dbus_loop_queue_dispatch (loop, connection))
             goto NO_MEM;
     }
 
@@ -577,7 +566,7 @@ CCSP_Message_Bus_Loop_Thread
 )
 {
     DBusLoop *loop = (DBusLoop *)ptr;
-    _dbus_loop_run (loop); // main loop, does _ref and _unref
+    dbus_loop_run (loop); // main loop, does _ref and _unref
     return NULL;
 }
 
@@ -946,7 +935,7 @@ CCSP_Message_Bus_Init
         */
 
         // start the loop and connect threads, should be just one of each, even if count > 1
-        bus_info->connection[count].loop = _dbus_loop_new();
+        bus_info->connection[count].loop = dbus_loop_new();
         pthread_create
             (
                 &thread_dbus_loop, 
@@ -1078,7 +1067,7 @@ CCSP_Message_Bus_Exit
 
         if(bus_info->connection[i].loop )
         {
-            _dbus_loop_quit(bus_info->connection[i].loop);
+            dbus_loop_quit(bus_info->connection[i].loop);
         }
     }
 
@@ -1571,7 +1560,7 @@ CCSP_Message_Bus_Send_Str
     }
 
     // get reply
-    _dbus_connection_lock(conn);
+    dbus_connection_lock(conn);
     reply = dbus_pending_call_steal_reply(pcall);
 
     if( ! reply) 
@@ -1591,7 +1580,7 @@ CCSP_Message_Bus_Send_Str
         pthread_mutex_lock(&cb_data->count_mutex);
         dbus_pending_call_set_notify (pcall, ccsp_msg_check_resp_sync, (void *)cb_data, NULL);
 
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
 
 #ifndef WIN32 
         gettimeofday(&now, NULL);
@@ -1630,7 +1619,7 @@ CCSP_Message_Bus_Send_Str
     }
     else
     {
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
         ret = analyze_reply(message, reply, NULL);
     }
 
@@ -1707,7 +1696,7 @@ CCSP_Message_Bus_Send_Msg
         goto EXIT;
     }
 
-    _dbus_connection_lock(conn);
+    dbus_connection_lock(conn);
     reply = dbus_pending_call_steal_reply(pcall);
     if( ! reply)  
     {
@@ -1723,7 +1712,7 @@ CCSP_Message_Bus_Send_Msg
         if( ! cb_data)
         {
             CcspTraceError(("<%s>: cb_data malloc fail \n", __FUNCTION__));
-            _dbus_connection_unlock(conn);
+            dbus_connection_unlock(conn);
             ret = CCSP_Message_Bus_OOM;
             goto EXIT;
         }
@@ -1736,7 +1725,7 @@ CCSP_Message_Bus_Send_Msg
         pthread_mutex_lock(&cb_data->count_mutex);
         dbus_pending_call_set_notify (pcall, ccsp_msg_check_resp_sync, (void *)cb_data, NULL);
 
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
 
 #ifndef WIN32 
         gettimeofday(&now, NULL);
@@ -1775,7 +1764,7 @@ CCSP_Message_Bus_Send_Msg
     }
     else
     {
-        _dbus_connection_unlock(conn);
+        dbus_connection_unlock(conn);
         ret = analyze_reply(message, reply, result);
     }
 
